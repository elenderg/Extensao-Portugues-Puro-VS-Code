{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json"
    ,"name": "PoP"
    ,"patterns": [
       {  "include": "#arguments"     }
      ,{  "include": "#constant"      }
      ,{  "include": "#comment"       }
      ,{  "include": "#entity"        }
      ,{  "include": "#function"      }
      ,{  "include": "#keyword"       }
      ,{  "include": "#meta"          }
      ,{  "include": "#numero"        }
      ,{  "include": "#operadores"    }
      ,{  "include": "#punctuation"   }
      ,{  "include": "#strings"       }
      ,{  "include": "#support"       }
      ,{  "include": "#variable"      }
    ]
    ,"repository": {
      "comment": {
        "patterns": [
           {"match": "(\\[.*?\\])","name": "comment.block.pop"              }
          ,{"match": "\\\\(.*)",   "name": "comment.line.character.pop"     }
          ,{"match": "(\\(.*?\\))","name": "comment.block.documentation.pop"}
        ]
      },
       "strings": {"patterns": [{"name": "string.quoted.double.pop","begin": "\"","end": "\""}]}
      ,"constant": {
        "patterns": [
          {"name": "constant.numeric.integer.decimal.pop",
            "match": "\\b(-?[\\d]+)\\b"},
          {"name": "constant.numeric.integer.hexadecimal.pop",
            "match": "(\\$[a-fA-F\\d]+)"},
          {"name": "constant.numeric.integer.float.decimal.pop",
            "match": "\\b(-?[\\d]+\\-[\\d]+/[\\d]+)\\b"},
          {"name": "constant.language.pop",
            "match": "\\b(?i:(sim|não|nulo|inexistente|em branco))\\b"}
        ]
      }
      ,"meta":{
        "patterns":[{"name": "markup.italic.pop", "match": "\\b(denominad[oa]s?)\\b"}]}
      ,"function": {
        "patterns": [
          {"name": "storage.type.function.Rotina.pop","match": "\\bRotina\\s*para\\s*que\\s*se"},
          {"name": "storage.type.function.Rotina.pop","match": "\\bFunção\\s*para\\s*que\\s*se"},
          {"name": "storage.type.function.Rotina.pop","match": "\\bdetermine\\s*se"}
        ]
      }
      ,"keyword": {
        "patterns": [
           {"name": "keyword.language.artigos.definidos.pop","match": "\\b(A|As|O|Os)\\b"}
          ,{"name": "keyword.language.artigos.indefinidos.pop","match": "\\b(Um|Uns|Uma|Umas)\\b"}
          ,{"name": "variable.language.this.pop",
            "match": "\\b(?i:(deste|desta|destes|destas|dessa|dessas|desse|desses|dum|duma|dumas|duns|essa|essas|esse|esses|esta|estas|este|estes))\\b"}
          ,{"name": "string.other.parameters.begin.pop",
            "match": "\\b(a|as|o|os|um|uns|uma|umas)\\b"}
          ,{"name": "keyword.control.pop",
            "match": "\\b(?i:(desde|se))\\b|\\(referência\\)"}
          ,{"name": "keyword.control.adjetivos.pop",
            "match": "\\b(?i:(ativo|ativado|desativado|desligado|inativo|inativado|inexistente|ligado|nulo|original|próximo|vazia|vazias|vazio|vazios))\\b"}
          ,{"name": "keyword.control.preposicoes.pop",
            "match": "\\b(?i:(abaixo|acerca|acima|acordo|after|algum|alone|alta|alto|ante|antes|apenas|aproada|aproado|aproando|aproximadamente|após|atinente|através|até|backward|backwards|cerca|com|começando|como|comprida|comprido|concernente|contra|cuja|cujas|cujo|cujos|d'|dada|dado|dando|debaixo|dentre|dentro|dentro|depois|depois|desde|durante|em|enquanto|entre|então|exclusivamente|fora|gerando|iniciando|larga|largo|mediante|menores|orientada|orientado|orientando|orientando-se|para|parecida|parecido|perante|pertencente|pertinente|perto|pointing|por|quanto|quão|referente|regressivamente|relativa|relativo|resultando|retornando|sem|semelhante|similar|sob|sobre|somente|só|tanto|tão|unicamente|usando|versus|via|virada|virado|virando|voltada|voltado))\\b"}
          ,{"name": "keyword.control.verbos.pop",
            "match": "\\b(?i:(diga|retorne|itere|reitere|começa|começar|deve|devem|deveria|deveriam|é|está|estãoestamos|estar|estará|estarão|estava|estavam|estiver|estiverem|excede|excedem|existe|existir|finaliza|finalizar|foi|for|foram|forem|há|houver|inicia|iniciar|necessita|necessitar|parece|pode|podem|podemos|poderia|poderia|possuem|possui|possuir|puder|puderem|requer|ser|será|serão|supera|superam|são|tem|ter|termina|terminar|têm))\\b"}
          ,{"name": "keyword.control.punctuation.accessor.pop",
            "match": "\\b(?i:(à|às|ao|aos|na|nas|no|nos|num|numa|numas|nuns|pela|pelas|pelo|pelos))\\b"}
          ,{"name": "keyword.control.adverbios.pop",
            "match": "\\b(?i:(acima|abaixo|adiante|agora|ainda|ali|além|antes|apenas|assim|atrás|bem|cada|cerca de|certamente|certo|certos|certa|certas|conforme))\\b"}
          ,{"name": "keyword.control.substantivos.pop",
            "match": "\\b(?i:(baixo|cima|direita|direito|esquerda|esquerdo))\\b"}
          ,{"name": "keyword.control.operadoresaritmeticos.pop",
            "match": "\\b(?i:(dividido|e|mais|menos|multiplicado|nem|ou|vezes))\\b"}
          ,{"name": "keyword.other.operadoresdecomparacao.pop",
            "match": "\\b(?i:(igual a|maior do que|maior que|maior|mais|menor do que|menor que|menor|igual))\\b"}
          ,{"name": "keyword.other.operadoresdeconcatenacao.pop",
            "match": "\\b(?i:(acompanhado de|junto com|seguido de))\\b"}
        ]
      }
      ,"punctuation": {"patterns": [{"name": "keyword.punctuation.terminator.pop","match": "\\;|\\.|\\,|\\:"}]}
      ,"support":{"patterns":[
          {
            "name": "support.type.ponteiro.pop",
            "match": "(?<=(é\\s+um)\\s+)\\b(ponteiro)\\b(?=\\s*\\b(para)\\b)"
          },
          {
            "name": "support.type.ponteiro.pop",
            "match": "(?<=(é\\s+um)\\s+)\\b(ponteiro)\\b(?=\\s*\\[)"
          },        
          {
            "name": "support.type.estrutura1.pop",
            "match": "(?<=(é\\s+uma)\\s+)\\b(estrutura)\\b(?=\\s*\\b(com)\\b)"
          },
          {
            "name": "support.type.estrutura2.pop",
            "match": "(?<=(é\\s+umas)\\s+)\\b(estruturas)\\b(?=\\s*\\b(com)\\b)"
          },
          {
            "name": "support.type.estrutura3.pop",
            "match": "(?<=(são\\s+uma)\\s+)\\b(estrutura)\\b(?=\\s*\\b(com)\\b)"
          },
          {
            "name": "support.type.estrutura4.pop",
            "match": "(?<=(são\\s+umas)\\s+)\\b(estruturas)\\b(?=\\s*\\b(com)\\b)"
          },
          {
            "name": "support.type.estrutura_nomeada.pop",
            "match": "(?<=(é\\s+um|é\\s+uma|é\\s+uns|é\\s+umas|são\\s+um|são\\s+umas|são\\s+uns|são\\s+umas)\\s+)[A-Za-zÀ-ÿ_\\-\\#\/]*?\\s*[\\wÀ-ÿ ]*?(?=\\s*\\b(com)\\b)"
          },
          {
            "name": "support.type.membro_de_estrutura.pop",
            "match": "(?<=\\b(Um|Uma|Uns|Umas)\\b\\s+)[A-Za-zÀ-ÿ_\\-\\#\/]*?\\s*[\\wÀ-ÿ ]*?(?=\\s*\\b(denominado|denominada|denominados|denominadas)\\b)"
          },
          {
            "name": "support.type.membro_de_estrutura_nomeado.pop",
            "match": "(?<=\\d\\s+)[A-Za-zÀ-ÿ_\\-\\#\/]*?\\s*[\\wÀ-ÿ ]*?(?=\\s*\\b(denominado|denominada|denominados|denominadas)\\b)"
          },
          {
            "name": "support.type.uniontype.pop",
            "match": "(?<=\\b(Um|Uma|Uns|Umas)\\b\\s+)[A-Za-zÀ-ÿ_\\-\\#\/]*?\\s*[\\wÀ-ÿ ]*?(?=\\s*\\b(sob)\\b)"
          },
          {
            "name": "support.type.ponteiro_para_um_tipo.pop",
            "match": "(?<=\\b(para\\s+um|para\\s+uma|para\\s+uns|para\\s+umas)\\b\\s+)[A-Za-zÀ-ÿ_\\-\\#\/]*?\\s*[\\wÀ-ÿ ]*?(?=\\s*(\\.|\\[|\\,|\\b(e|ou)\\b))"
          },
          {
            "name": "support.type.global.pop",
            "match": "(?<=\\b(é um|é uma|é uns|é umas|são um|são umas|são uns|são umas)\\b\\s+)[A-Za-zÀ-ÿ_\\-\\#\/]*?\\s*[\\wÀ-ÿ ]*?(?=\\s+(igual a)\\s+)"
          },
          {
            "name": "support.type.simples.pop",
            "match": "(?<=\\b(Um|Uma|Uns|Umas)\\b\\s+)[A-Za-zÀ-ÿ_\\-\\#\/]*?\\s*[A-Za-zÀ-ÿ_\\-\\#\/ ]*?(?=\\s*\\b(é|são)\\b)"
          },
          {
            "name": "variable.other.structmember.pop",
            "match": "(?<=\\b(denominado|denominada|denominados|denominadas)\\b\\s+)[A-Za-zÀ-ÿ_\\d\\-\\#\/]*?\\s*[A-Za-zÀ-ÿ_\\d\\-\\#\/ ]*?(?=\\s*(\\.|\\[|\\,|\\(|\\b(e|ou|sob)\\b))"
          },        
          {
            "name": "variable.other.unionmember.pop",
            "match": "(?<=\\b(sob o|sob a|sob os|sob as)\\b\\s+)[A-Za-zÀ-ÿ_\\-\\#\/]*?\\s*[\\wÀ-ÿ ]*?(?=\\s*(\\.|\\[|\\,|\\(|\\b(e|ou)\\b))"
          },
          {
            "name": "support.type.structmember.simple.pop",
            "match": "(?<=\\b(Um|Uma|Uns|Umas)\\b\\s+)[A-Za-zÀ-ÿ_\\-\\#\/]*?\\s*[A-Za-zÀ-ÿ_\\d\\-\\#\/ ]*?(?=\\s*(\\.|\\[|\\,|\\(|\\b(e|ou|sob|denominado|denominada|denominados|denominadas)\\b))"
          },
          
          {
            "name": "variable.other.readwrite.estrutura.pop",
            "match": "(?<=\\b(O|A|Os|As)\\b\\s+)[A-Za-zÀ-ÿ_\\-\\'\\&\\@\\ƒŠŒŽœžŸ£µ\\#\/]*?\\s*[A-Za-zÀ-ÿ_\\'\\d\\&\\@\\ƒŠŒŽœžŸ£µ\\-\\#\/ ]*?(?=\\s*(deste|desta|destes|destas|dum|duma|duns|dumas)\\s+)"
          },  
          {
            "name": "variable.other.constant.pop",
            "match": "(?<=\\b(O|A|Os|As)\\b\\s+)[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µŠŒŽ\\-\\#\/]*?\\s*[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µ\\d\\-\\#\/ ]*?(?=\\s*(é um|é uma|é uns|é umas|são um|são umas|são uns|são umas)\\s+)"
          },
          {
            "name": "entity.name.function.withparameters.pop",
            "match": "(?<=\\b(para que se)\\b\\s+)[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µŠŒŽ\\-\\#\/]*?\\s*[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µ\\d\\-\\#\/ ]*?(?=\\s*\\b(um|uma|uns|umas|dum|duma|duns|dumas|para|em|usando|com|desde|duma|duns|dumas|por)\\b\\s+)"
          },
          {
            "name": "entity.name.function.noparameters.pop",
            "match": "(?<=\\b(para que se)\\b\\s+)[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µŠŒŽ\\-\\#\/]*?\\s*[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µ\\d\\-\\#\/ ]*?(?=\\s*(\\:|\\;))"
          },
          {
            "name": "entity.name.function.invocation.pop",
            "match": "(?<=  )[A-ZÀ-ß][A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µŠŒŽ\\-\\#\/]*?\\s*[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µ\\d\\-\\#\/ ]*?(?=\\s*\\b(\\d|o|a|os|as|à|às|ao|aos|um|uma|uns|umas|dum|duma|duns|dumas|para|em|usando|com|desde|por|deste|desta|destes|destas)\\b\\s+)"
          },
          {
            "name": "entity.name.function.invocation.string_literal.pop",
            "match": "(?<= )[A-ZÀ-ß][A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µŠŒŽ\\-\\#\/]*?\\s*[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µ\\d\\-\\#\/ ]*?(?=\\s*\")"
          },
          {
            "name": "entity.name.function.invocation.numero_literal.pop",
            "match": "(?<=$\\s*)[A-ZÀ-ß][A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µŠŒŽ\\-\\#\/]*?\\s*[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µ\\d\\-\\#\/ ]*?(?=\\s*\\d)"
          },
          {
            "name": "entity.name.function.invocation.hexadecimal_literal.pop",
            "match": "(?<= )[A-ZÀ-ß][A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µŠŒŽ\\-\\#\/]*?\\s*[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µ\\d\\-\\#\/ ]*?(?=\\s*\\$)"
          },
          {
            "name": "entity.name.function.invocation.postcomma.pop",
            "match": "(?<=, )[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µŠŒŽ\\-\\#]*?\\s*[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µ\\d\\-\\# ]*?(?=\\s*\\b(\\d|o|a|os|as|à|às|ao|aos|um|uma|uns|umas|dum|duma|duns|dumas|para|em|usando|com|desde|por|deste|desta|destes|destas)\\b\\s+)"
          },
          {
            "name": "entity.name.function.invocation..postcommastring_literal.pop",
            "match": "(?<=, )[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µŠŒŽ\\-\\#\/]*?\\s*[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µ\\d\\-\\#\/ ]*?(?=\\s*\")"
          },
          {
            "name": "entity.name.function.invocation..postcommanumero_literal.pop",
            "match": "(?<=, )[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µŠŒŽ\\-\\#\/]*?\\s*[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µ\\d\\-\\#\/ ]*?(?=\\s*\\d)"
          },
          {
            "name": "entity.name.function.invocation..postcommahexadecimal_literal.pop",
            "match": "(?<=, )[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µŠŒŽ\\-\\#\/]*?\\s*[A-Za-zÀ-ÿ_\\'\\&\\@\\ƒŠŒŽœžŸ£µ\\d\\-\\#\/ ]*?(?=\\s*\\$)"
          },
          {
            "name": "variable.other.readwrite.pop",
            "begin": "keyword.language.artigos.indefinidos.pop",
            "end": "keyword.control.preposicoes.pop"
          }
          
          
      ]
    }

    }
    ,"scopeName": "source.escopo.portugues"
}